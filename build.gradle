buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.7.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.6.0.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    // Change to your preferred mappings
    mappings channel: 'official', version: minecraftVersion
    // Add your AccessTransformer
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,LOADING,CORE'
            property 'forge.logging.console.level', 'debug'

            mods {
                liz_lib {
                    source sourceSets.main
                }
                liz_lib_test_mod {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,LOADING,CORE'
            property 'forge.logging.console.level', 'debug'

            mods {
                liz_lib {
                    source sourceSets.main
                }

                liz_lib_test_mod {
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,LOADING,CORE'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'liz_lib_test_mod', '--all', '--output', file('src/test/generated/resources'), '--existing', file('src/test/resources')

            mods {
                liz_lib {
                    source sourceSets.main
                }

                liz_lib_test_mod {
                    source sourceSets.test
                }
            }
        }
    }
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

sourceSets.test.resources { srcDirs 'src/test/generated/resources' }

dependencies {
    // Use the latest version of Minecraft Forge
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    // test dependencies
    testImplementation(platform("org.junit:junit-bom:5.8.2"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {

    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes([
                'Specification-Title': "LizLib",
                'Specification-Vendor': "liz",
                'Specification-Version': "1", // We are version 1 of ourselves
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' :"liz",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
